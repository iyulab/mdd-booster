namespace MDDBooster.Builders.ModelProject;

/// <summary>
/// ModelGenerator - Enum generation methods
/// </summary>
public partial class ModelGenerator
{
    /// <summary>
    /// Generate a C# enum
    /// </summary>
    public string GenerateEnum(MDDEnum enum_)
    {
        return ErrorHandling.ExecuteSafely(() =>
        {
            var sb = new StringBuilder();

            // File header
            sb.AppendLine("// Code generated by \"MDD Booster\"; DO NOT EDIT.");
            sb.AppendLine($"namespace {GetEnumNamespace()};");
            sb.AppendLine();

            // Summary comment
            if (!string.IsNullOrEmpty(enum_.BaseEnum.Description))
            {
                sb.AppendLine("/// <summary>");
                sb.AppendLine($"/// {enum_.BaseEnum.Description}");
                sb.AppendLine("/// </summary>");
            }

            // Enum declaration
            sb.AppendLine($"public enum {enum_.BaseEnum.Name}");
            sb.AppendLine("{");

            // Enum values
            AppendEnumValues(sb, enum_);

            sb.AppendLine("}");
            return sb.ToString();
        },
        string.Empty,
        "Failed to generate enum for {EnumName}",
        enum_.BaseEnum.Name);
    }

    private void AppendEnumValues(StringBuilder sb, MDDEnum enum_)
    {
        for (int i = 0; i < enum_.BaseEnum.Values.Count; i++)
        {
            var value = enum_.BaseEnum.Values[i];

            // Value summary comment
            if (!string.IsNullOrEmpty(value.Description))
            {
                sb.AppendLine("    /// <summary>");
                sb.AppendLine($"    /// {value.Description}");
                sb.AppendLine("    /// </summary>");
            }

            // Enum value declaration
            string enumValue = GetEnumValueDeclaration(value);
            string comma = i < enum_.BaseEnum.Values.Count - 1 ? "," : "";

            sb.AppendLine($"    {value.Name}{enumValue}{comma}");
        }
    }

    private string GetEnumValueDeclaration(M3LParser.Models.M3LEnumValue value)
    {
        if (string.IsNullOrEmpty(value.Value))
            return "";

        // Check if the value is numeric
        if (int.TryParse(value.Value, out int numericValue))
        {
            return $" = {numericValue}";
        }

        // For string values, we might need to handle them differently
        // depending on the enum type requirements
        return $" = {value.Value}";
    }
}