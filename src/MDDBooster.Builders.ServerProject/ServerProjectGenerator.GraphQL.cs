namespace MDDBooster.Builders.ServerProject;

/// <summary>
/// ServerProjectGenerator - GraphQL generation methods
/// </summary>
public partial class ServerProjectGenerator
{
    /// <summary>
    /// Generate AppGqlQuery class
    /// </summary>
    public string GenerateAppGqlQuery()
    {
        return ErrorHandling.ExecuteSafely(() =>
        {
            var sb = new StringBuilder();

            // Add file header
            sb.AppendLine("// Code generated by \"MDD Booster\"; DO NOT EDIT.");
            sb.AppendLine();
            sb.AppendLine("using GraphQL.Types;");
            sb.AppendLine($"using {_config.Namespace}.Gql.Schemas;");
            sb.AppendLine();
            sb.AppendLine($"namespace {_config.Namespace}.Gql;");
            sb.AppendLine();

            // Class declaration
            string classModifiers = _config.UsePartialClasses ? "public partial class" : "public class";
            sb.AppendLine($"{classModifiers} AppGqlQuery : ObjectGraphType<object>");
            sb.AppendLine("{");

            // Constructor
            sb.AppendLine("    public AppGqlQuery(IServiceProvider provider)");
            sb.AppendLine("    {");
            sb.AppendLine("        Name = \"Query\";");
            sb.AppendLine();

            // Register all model queries
            var nonAbstractModels = Document.Models.Where(m => !m.BaseModel.IsAbstract).ToList();
            foreach (var model in nonAbstractModels)
            {
                sb.AppendLine($"        Register(provider.GetService<{model.BaseModel.Name}Query>()!);");
            }

            sb.AppendLine("    }");
            sb.AppendLine();

            // Register method
            sb.AppendLine("    private void Register(IGqlQuery queryType)");
            sb.AppendLine("    {");
            sb.AppendLine("        queryType.DefineQuery(this);");
            sb.AppendLine("    }");

            sb.AppendLine("}");

            return sb.ToString();
        },
        string.Empty,
        "Failed to generate AppGqlQuery");
    }

    /// <summary>
    /// Generate AppGqlSchema class
    /// </summary>
    public string GenerateAppGqlSchema()
    {
        return ErrorHandling.ExecuteSafely(() =>
        {
            var sb = new StringBuilder();

            // Add file header
            sb.AppendLine("// Code generated by \"MDD Booster\"; DO NOT EDIT.");
            sb.AppendLine();
            sb.AppendLine("using GraphQL.Instrumentation;");
            sb.AppendLine("using GraphQL.Types;");
            sb.AppendLine();
            sb.AppendLine($"namespace {_config.Namespace}.Gql;");
            sb.AppendLine();

            // Class declaration
            string classModifiers = _config.UsePartialClasses ? "public partial class" : "public class";
            sb.AppendLine($"{classModifiers} AppGqlSchema : Schema");
            sb.AppendLine("{");

            // Constructor
            sb.AppendLine("    public AppGqlSchema(IServiceProvider provider) : base(provider)");
            sb.AppendLine("    {");
            sb.AppendLine("        Query = provider.GetService(typeof(AppGqlQuery)) is AppGqlQuery query ");
            sb.AppendLine("            ? query ");
            sb.AppendLine("            : throw new InvalidOperationException();");
            sb.AppendLine();
            sb.AppendLine("        //Mutation = (AppGqlMutation)provider.GetService(typeof(AppGqlMutation)) ?? throw new InvalidOperationException();");
            sb.AppendLine();
            sb.AppendLine("        FieldMiddleware.Use(new InstrumentFieldsMiddleware());");
            sb.AppendLine("    }");

            sb.AppendLine("}");

            return sb.ToString();
        },
        string.Empty,
        "Failed to generate AppGqlSchema");
    }

    /// <summary>
    /// Generate AppGqlValidationRule class
    /// </summary>
    public string GenerateAppGqlValidationRule()
    {
        return ErrorHandling.ExecuteSafely(() =>
        {
            var sb = new StringBuilder();

            // Add file header
            sb.AppendLine("// Code generated by \"MDD Booster\"; DO NOT EDIT.");
            sb.AppendLine();
            sb.AppendLine($"namespace {_config.Namespace}.Gql;");
            sb.AppendLine();

            // Class declaration
            string classModifiers = _config.UsePartialClasses ? "public partial class" : "public class";
            sb.AppendLine($"{classModifiers} AppGqlValidationRule : GqlValidationRule");
            sb.AppendLine("{");
            sb.AppendLine("}");

            return sb.ToString();
        },
        string.Empty,
        "Failed to generate AppGqlValidationRule");
    }

    /// <summary>
    /// Generate FieldType class for a model
    /// </summary>
    public string GenerateFieldType(MDDModel model)
    {
        return ErrorHandling.ExecuteSafely(() =>
        {
            var sb = new StringBuilder();
            var pkFieldName = GetPrimaryKeyFieldName(model);

            // Add file header
            sb.AppendLine("// Code generated by \"MDD Booster\"; DO NOT EDIT.");
            sb.AppendLine();
            sb.AppendLine("using GraphQL.Types;");
            sb.AppendLine();
            sb.AppendLine($"namespace {_config.Namespace}.Gql.Schemas;");
            sb.AppendLine();

            // Single field type
            sb.AppendLine($"public class {model.BaseModel.Name}FieldType : FieldType");
            sb.AppendLine("{");
            sb.AppendLine($"    public {model.BaseModel.Name}FieldType()");
            sb.AppendLine("    {");
            sb.AppendLine($"        this.Name = nameof({model.BaseModel.Name});");
            sb.AppendLine();
            sb.AppendLine($"        this.Type = typeof({model.BaseModel.Name}GraphType);");
            sb.AppendLine();
            sb.AppendLine("        this.Arguments = new QueryArguments(new List<QueryArgument>");
            sb.AppendLine("        {");
            sb.AppendLine("            new QueryArgument<NonNullGraphType<IdGraphType>>");
            sb.AppendLine("            {");
            sb.AppendLine($"                Name = nameof({model.BaseModel.Name}.{pkFieldName})");
            sb.AppendLine("            }");
            sb.AppendLine("        });");
            sb.AppendLine();
            sb.AppendLine($"        this.Resolver = IoC.Resolve<{model.BaseModel.Name}Repository>().GetResolverFindOne();");
            sb.AppendLine("    }");
            sb.AppendLine("}");
            sb.AppendLine();

            // Multiple field type
            sb.AppendLine($"public class {model.BaseModel.Name}sFieldType : FieldType");
            sb.AppendLine("{");
            sb.AppendLine($"    public {model.BaseModel.Name}sFieldType()");
            sb.AppendLine("    {");
            sb.AppendLine($"        this.Name = \"{model.BaseModel.Name}s\";");
            sb.AppendLine();
            sb.AppendLine($"        this.Type = typeof(ListGraphType<{model.BaseModel.Name}GraphType>);");
            sb.AppendLine();

            // Generate arguments based on model fields - 주요 수정 부분
            sb.AppendLine("        this.Arguments = new QueryArguments(new List<QueryArgument>");
            sb.AppendLine("        {");

            // Basic search arguments that are commonly available
            sb.AppendLine($"            new QueryArgument<ListGraphType<IdGraphType>>");
            sb.AppendLine("            {");
            sb.AppendLine($"                Name = nameof({model.BaseModel.Name}sSearchRequest.{pkFieldName}s),");
            sb.AppendLine("            },");
            sb.AppendLine("            new QueryArgument<IntGraphType>");
            sb.AppendLine("            {");
            sb.AppendLine($"                Name = nameof({model.BaseModel.Name}sSearchRequest.Page)");
            sb.AppendLine("            },");
            sb.AppendLine("            new QueryArgument<IntGraphType>");
            sb.AppendLine("            {");
            sb.AppendLine($"                Name = nameof({model.BaseModel.Name}sSearchRequest.PageSize)");
            sb.AppendLine("            },");

            // Add commonly used search fields (only if they exist)
            var allFields = ModelUtilities.GetAllFields(Document, model);
            var commonSearchFields = new[] { "Name", "Title", "Status", "Type", "Category" };

            foreach (var commonField in commonSearchFields)
            {
                var field = allFields.FirstOrDefault(f =>
                    string.Equals(f.BaseField.Name, commonField, StringComparison.OrdinalIgnoreCase) ||
                    string.Equals(f.BaseField.Name, $"{commonField}Id", StringComparison.OrdinalIgnoreCase));

                if (field != null)
                {
                    string graphType = GetGraphQLType(field);
                    string propertyName = StringHelper.NormalizeName(field.BaseField.Name);

                    sb.AppendLine($"            new QueryArgument<ListGraphType<{graphType}>>");
                    sb.AppendLine("            {");
                    sb.AppendLine($"                Name = \"{propertyName}s\",");
                    sb.AppendLine("            },");
                }
            }

            sb.AppendLine("        });");
            sb.AppendLine();
            sb.AppendLine($"        this.Resolver = IoC.Resolve<{model.BaseModel.Name}Repository>().GetResolverFind();");
            sb.AppendLine("    }");
            sb.AppendLine("}");

            return sb.ToString();
        },
        string.Empty,
        "Failed to generate FieldType for {ModelName}",
        model.BaseModel.Name);
    }

    /// <summary>
    /// Generate GraphType class for a model
    /// </summary>
    public string GenerateGraphType(MDDModel model)
    {
        return ErrorHandling.ExecuteSafely(() =>
        {
            var sb = new StringBuilder();

            // Add file header
            sb.AppendLine("// Code generated by \"MDD Booster\"; DO NOT EDIT.");
            sb.AppendLine();
            sb.AppendLine("using GraphQL.Types;");
            sb.AppendLine();
            sb.AppendLine($"namespace {_config.Namespace}.Gql.Schemas;");
            sb.AppendLine();

            // Class declaration
            sb.AppendLine($"public class {model.BaseModel.Name}GraphType: ObjectGraphType<{model.BaseModel.Name}>");
            sb.AppendLine("{");

            // Constructor
            sb.AppendLine($"    public {model.BaseModel.Name}GraphType({model.BaseModel.Name}Repository repository)");
            sb.AppendLine("    {");
            sb.AppendLine($"        Name = nameof({model.BaseModel.Name});");
            sb.AppendLine();

            // Add fields for all properties
            var allFields = ModelUtilities.GetAllFields(Document, model);
            foreach (var field in allFields)
            {
                // Skip @index directives and auto-generated index fields
                if (IsAutoGeneratedIndexField(field))
                    continue;

                string graphType = GetGraphQLType(field);
                string nullableWrapper = field.BaseField.IsNullable ? "" : "NonNullGraphType<";
                string nullableClose = field.BaseField.IsNullable ? "" : ">";

                sb.AppendLine($"        AddField(new FieldType() {{ Name = nameof({model.BaseModel.Name}.{StringHelper.NormalizeName(field.BaseField.Name)}), Type = typeof({nullableWrapper}{graphType}{nullableClose}) }});");
            }

            // Add navigation properties (relationships)
            var relationFields = GetRelationshipFields(model);
            foreach (var relation in relationFields)
            {
                sb.AppendLine($"        AddField(new {relation.TargetModel}sFieldType() {{ Resolver = repository.GetResolver{relation.TargetModel}s() }});");
            }

            sb.AppendLine("    }");
            sb.AppendLine("}");

            return sb.ToString();
        },
        string.Empty,
        "Failed to generate GraphType for {ModelName}",
        model.BaseModel.Name);
    }

    /// <summary>
    /// Generate Query class for a model
    /// </summary>
    public string GenerateQuery(MDDModel model)
    {
        return ErrorHandling.ExecuteSafely(() =>
        {
            var sb = new StringBuilder();

            // Add file header
            sb.AppendLine("// Code generated by \"MDD Booster\"; DO NOT EDIT.");
            sb.AppendLine();
            sb.AppendLine("using GraphQL.Types;");
            sb.AppendLine();
            sb.AppendLine($"namespace {_config.Namespace}.Gql.Schemas;");
            sb.AppendLine();

            // Class declaration
            sb.AppendLine($"public class {model.BaseModel.Name}Query : IGqlQuery");
            sb.AppendLine("{");

            // DefineQuery method
            sb.AppendLine("    public void DefineQuery(IObjectGraphType query)");
            sb.AppendLine("    {");
            sb.AppendLine($"        query.AddField(new {model.BaseModel.Name}FieldType());");
            sb.AppendLine($"        query.AddField(new {model.BaseModel.Name}sFieldType());");
            sb.AppendLine("    }");

            sb.AppendLine("}");

            return sb.ToString();
        },
        string.Empty,
        "Failed to generate Query for {ModelName}",
        model.BaseModel.Name);
    }

    /// <summary>
    /// Generate Repository class for a model
    /// </summary>
    public string GenerateRepository(MDDModel model)
    {
        return ErrorHandling.ExecuteSafely(() =>
        {
            var sb = new StringBuilder();
            var pkFieldName = GetPrimaryKeyFieldName(model);

            // Add file header
            sb.AppendLine("// Code generated by \"MDD Booster\"; DO NOT EDIT.");
            sb.AppendLine();
            sb.AppendLine("using GraphQL;");
            sb.AppendLine("using GraphQL.Resolvers;");
            sb.AppendLine("using SqlKata.Execution;");
            sb.AppendLine();
            sb.AppendLine($"namespace {_config.Namespace}.Gql.Schemas;");
            sb.AppendLine();

            // Class declaration
            sb.AppendLine($"public class {model.BaseModel.Name}Repository: IGqlRepository");
            sb.AppendLine("{");

            // Fields
            sb.AppendLine("    private readonly IGqlResolver resolver;");
            sb.AppendLine("    ");

            // Constructor
            sb.AppendLine($"    public {model.BaseModel.Name}Repository(IGqlResolver resolver)");
            sb.AppendLine("    {");
            sb.AppendLine("        this.resolver = resolver;");
            sb.AppendLine();
            sb.AppendLine($"        resolver.AddHandler(typeof({model.BaseModel.Name}SearchRequest), this);");
            sb.AppendLine($"        resolver.AddHandler(typeof({model.BaseModel.Name}sSearchRequest), this);");
            sb.AppendLine("    }");
            sb.AppendLine();

            // FindOneAsync method
            sb.AppendLine($"    public Task<{model.BaseModel.Name}?> FindOneAsync({model.BaseModel.Name}SearchRequest request)");
            sb.AppendLine("    {");
            sb.AppendLine("        var query = resolver.ResolveQueryFactory()");
            sb.AppendLine($"            .Query(nameof({model.BaseModel.Name}))");
            sb.AppendLine("            .When(request.Columns.AnyItem(), q => q.Select(request.Columns))");
            sb.AppendLine($"            .Where(q => q.Where(\"{pkFieldName}\", request.{pkFieldName}))");
            sb.AppendLine($"            .FirstOrDefaultAsync<{model.BaseModel.Name}?>();");
            sb.AppendLine();
            sb.AppendLine("        return query;");
            sb.AppendLine("    }");
            sb.AppendLine();

            // FindAsync method
            sb.AppendLine($"    public Task<IEnumerable<{model.BaseModel.Name}>> FindAsync({model.BaseModel.Name}sSearchRequest request)");
            sb.AppendLine("    {");
            sb.AppendLine("        var query = resolver.ResolveQueryFactory()");
            sb.AppendLine($"            .Query(nameof({model.BaseModel.Name}))");
            sb.AppendLine("            .When(request.Columns != null && request.Columns.AnyItem(), q => q.Select(request.Columns))");
            sb.AppendLine($"            .When(request.{pkFieldName}s != null && request.{pkFieldName}s.AnyItem(), q => q.WhereIn(nameof({model.BaseModel.Name}.{pkFieldName}), request.{pkFieldName}s))");
            sb.AppendLine("            .ForPage(request.Page ?? request.DefaultPage, request.PageSize ?? request.DefaultPageSize)");
            sb.AppendLine($"            .GetAsync<{model.BaseModel.Name}>();");
            sb.AppendLine();
            sb.AppendLine("        return query;");
            sb.AppendLine("    }");
            sb.AppendLine();

            // GetResolverFindOne method
            sb.AppendLine("    internal IFieldResolver? GetResolverFindOne()");
            sb.AppendLine("    {");
            sb.AppendLine($"        var r = new FuncFieldResolver<{model.BaseModel.Name}, {model.BaseModel.Name}>(context =>");
            sb.AppendLine("        {");
            sb.AppendLine($"            var request = new {model.BaseModel.Name}SearchRequest()");
            sb.AppendLine("            {");
            sb.AppendLine($"                {pkFieldName} = context.GetArgument<Guid>(nameof({model.BaseModel.Name}SearchRequest.{pkFieldName})),");
            sb.AppendLine("                Columns = context.GetSelectColumns()");
            sb.AppendLine("            };");
            sb.AppendLine("            var query = resolver.FindOneAsync(request);");
            sb.AppendLine($"            return new ValueTask<{model.BaseModel.Name}?>(query);");
            sb.AppendLine("        });");
            sb.AppendLine();
            sb.AppendLine("        return r;");
            sb.AppendLine("    }");
            sb.AppendLine();

            // GetResolverFind method
            sb.AppendLine("    internal IFieldResolver? GetResolverFind()");
            sb.AppendLine("    {");
            sb.AppendLine($"        var r = new FuncFieldResolver<{model.BaseModel.Name}, IEnumerable<{model.BaseModel.Name}>>(context =>");
            sb.AppendLine("        {");
            sb.AppendLine($"            var request = new {model.BaseModel.Name}sSearchRequest()");
            sb.AppendLine("            {");
            sb.AppendLine($"                {pkFieldName}s = context.GetArgument<Guid[]?>(nameof({model.BaseModel.Name}sSearchRequest.{pkFieldName}s)),");
            sb.AppendLine("                Columns = context.GetSelectColumns(),");
            sb.AppendLine("                Page = context.HasArgument(\"Page\") ? context.GetArgument<int>(\"Page\") : null,");
            sb.AppendLine("                PageSize = context.HasArgument(\"PageSize\") ? context.GetArgument<int>(\"PageSize\") : null,");
            sb.AppendLine("            };");
            sb.AppendLine("            var query = resolver.FindAsync(request);");
            sb.AppendLine($"            return new ValueTask<IEnumerable<{model.BaseModel.Name}>>(query)!;");
            sb.AppendLine("        });");
            sb.AppendLine();
            sb.AppendLine("        return r;");
            sb.AppendLine("    }");
            sb.AppendLine("    ");

            // Generate relationship resolvers
            var relationFields = GetRelationshipFields(model);
            foreach (var relation in relationFields)
            {
                sb.AppendLine($"    internal IFieldResolver GetResolver{relation.TargetModel}s()");
                sb.AppendLine("    {");
                sb.AppendLine($"        var r = new FuncFieldResolver<{model.BaseModel.Name}, IEnumerable<{relation.TargetModel}>> (context =>");
                sb.AppendLine("        {");
                sb.AppendLine($"            var request = new {relation.TargetModel}sSearchRequest()");
                sb.AppendLine("            {");
                sb.AppendLine($"                //{relation.ForeignKeyField} = new Guid[] {{ context.Source.{pkFieldName} }},");
                sb.AppendLine("                Columns = context.GetSelectColumns(),");
                sb.AppendLine("                Page = context.HasArgument(\"Page\") ? context.GetArgument<int>(\"Page\") : null,");
                sb.AppendLine("                PageSize = context.HasArgument(\"PageSize\") ? context.GetArgument<int>(\"PageSize\") : null,");
                sb.AppendLine("            };");
                sb.AppendLine("            var query = resolver.FindAsync(request);");
                sb.AppendLine($"            return new ValueTask<IEnumerable<{relation.TargetModel}>>(query)!;");
                sb.AppendLine("        });");
                sb.AppendLine();
                sb.AppendLine("        return r;");
                sb.AppendLine("    }");
                sb.AppendLine();
            }

            sb.AppendLine("}");

            return sb.ToString();
        },
        string.Empty,
        "Failed to generate Repository for {ModelName}",
        model.BaseModel.Name);
    }

    /// <summary>
    /// Check if a field is an auto-generated index field that should be filtered out
    /// </summary>
    private bool IsAutoGeneratedIndexField(MDDField field)
    {
        // Skip fields that are auto-generated from @index attributes
        var fieldName = field.BaseField.Name;

        // Check if this is an @index directive (these should be filtered out)
        if (fieldName.StartsWith("@index", StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        // Check for auto-generated index fields with "Index" prefix
        // Pattern: fields starting with "Index" followed by concatenated field names
        // Examples: "IndexTargetTypeTargetId", "IndexSeriesIdSeriesOrder", "IndexStatusCreatedAt"
        if (fieldName.StartsWith("Index", StringComparison.OrdinalIgnoreCase) &&
            fieldName.Length > 5)
        {
            var afterIndex = fieldName.Substring(5);

            // Must contain at least one uppercase letter (indicating camelCase concatenation)
            // and should NOT be a regular field that just happens to start with "Index"
            if (afterIndex.Any(char.IsUpper))
            {
                // Additional check: if it contains common concatenation patterns
                // like multiple uppercase letters separated by lowercase
                var uppercaseCount = afterIndex.Count(char.IsUpper);
                bool isIndexField = uppercaseCount >= 2; // At least 2 uppercase letters indicates field concatenation

                if (isIndexField)
                {
                    return true;
                }
            }
        }

        return false;
    }
}