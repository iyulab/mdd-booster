using M3LParser.Helpers;
using MDDBooster.Builders.MsSql.Helpers;
using MDDBooster.Utilities;

namespace MDDBooster.Builders.MsSql.Generators;

/// <summary>
/// Generator for SQL table definitions
/// </summary>
public class TableDefinitionGenerator
{
    private readonly MDDDocument _document;
    private readonly string _schemaName;

    public TableDefinitionGenerator(MDDDocument document, string schemaName)
    {
        _document = document;
        _schemaName = schemaName;
    }

    /// <summary>
    /// Generate SQL for a single table
    /// </summary>
    public string GenerateTable(MDDModel model)
    {
        var sb = new StringBuilder();
        var tableName = StringHelper.NormalizeName(model.BaseModel.Name);

        // Start CREATE TABLE statement
        sb.AppendLine("-- # Code generated by \"MDD Booster\"; DO NOT EDIT.");
        sb.AppendLine($"CREATE TABLE [{_schemaName}].[{tableName}]");
        sb.AppendLine("(");

        // Get all fields including inherited ones through the inheritance hierarchy
        var allFields = ModelUtilities.GetAllFields(_document, model);

        // Debug info for diagnostic purposes
        AppLog.Debug("Table {TableName} has {FieldCount} fields after inheritance", tableName, allFields.Count);

        // Check for primary key
        var primaryKeyField = allFields.FirstOrDefault(f => f.BaseField.IsPrimaryKey);
        if (primaryKeyField != null)
        {
            AppLog.Debug("Found primary key field: {FieldName} (Type: {FieldType})",
                primaryKeyField.BaseField.Name, primaryKeyField.BaseField.Type);
        }
        else
        {
            AppLog.Warning("No primary key field found for table: {TableName}", tableName);
        }

        // Generate column definitions
        var columnDefs = new List<string>();
        var uniqueConstraints = new List<string>();
        bool hasPrimaryKey = false;

        foreach (var field in allFields)
        {
            // Debug info for field exclusion
            if (field.ShouldExcludeFromSql())
            {
                AppLog.Debug("Skipping field {FieldName} for table {TableName} due to exclusion",
                    field.BaseField.Name, tableName);
                continue;
            }

            // Skip fields that are actually index definitions
            if (SqlHelpers.IsIndexDefinition(field))
            {
                continue;
            }

            try
            {
                // Check if this field is a primary key
                if (field.BaseField.IsPrimaryKey)
                {
                    hasPrimaryKey = true;
                    AppLog.Debug("Processing primary key field: {FieldName}", field.BaseField.Name);
                }

                // Create column definition
                var columnDef = CreateColumnDefinition(field, tableName);
                if (!string.IsNullOrEmpty(columnDef))
                {
                    columnDefs.Add(columnDef);
                }

                // Create unique constraint if needed (if not already a primary key)
                if (field.BaseField.IsUnique && !field.BaseField.IsPrimaryKey)
                {
                    var fieldName = StringHelper.NormalizeName(field.BaseField.Name);
                    uniqueConstraints.Add($"    CONSTRAINT [UK_{tableName}_{fieldName}] UNIQUE NONCLUSTERED ([{fieldName}])");
                }
            }
            catch (Exception ex)
            {
                AppLog.Error(ex, "Error processing field '{FieldName}' in model '{ModelName}'",
                    field.BaseField?.Name ?? "unknown", model.BaseModel.Name);
                // Skip this field but continue processing others
                continue;
            }
        }

        // Process model-level unique constraints (@unique attributes)
        if (model.BaseModel.Indexes != null)
        {
            foreach (var index in model.BaseModel.Indexes)
            {
                if (index.IsUnique && index.Fields != null && index.Fields.Count > 0)
                {
                    var fieldNames = index.Fields.Select(f => $"[{StringHelper.NormalizeName(f)}]").ToArray();
                    var constraintName = !string.IsNullOrEmpty(index.Name)
                        ? index.Name
                        : $"UK_{tableName}_{string.Join("_", index.Fields.Select(StringHelper.NormalizeName))}";

                    AppLog.Debug("Generating unique constraint for table {TableName}: index.Name='{IndexName}', generated name='{ConstraintName}'",
                        tableName, index.Name ?? "null", constraintName);

                    uniqueConstraints.Add($"    CONSTRAINT [{constraintName}] UNIQUE NONCLUSTERED ({string.Join(", ", fieldNames)})");

                    AppLog.Debug("Added unique constraint {ConstraintName} for fields {Fields}",
                        constraintName, string.Join(", ", index.Fields));
                }
            }
        }

        // All models should have a primary key - if we didn't find one, it's likely a bug
        if (!hasPrimaryKey)
        {
            AppLog.Warning("No primary key field was included in table {TableName} - check inheritance for _id field", tableName);
            // We don't hardcode the field now - the primary key should come from proper inheritance resolution
        }

        // Add all column definitions with proper comma placement
        for (int i = 0; i < columnDefs.Count; i++)
        {
            var columnDef = columnDefs[i];

            // Add comma after column definition (except for the last one if no constraints)
            if (i < columnDefs.Count - 1 || uniqueConstraints.Any())
            {
                // Find the position to insert comma (before comment if exists)
                if (columnDef.Contains(" -- "))
                {
                    var commentIndex = columnDef.IndexOf(" -- ");
                    var beforeComment = columnDef.Substring(0, commentIndex);
                    var comment = columnDef.Substring(commentIndex);
                    sb.AppendLine(beforeComment + "," + comment);
                }
                else
                {
                    sb.AppendLine(columnDef + ",");
                }
            }
            else
            {
                // Last column without constraints - no comma
                sb.AppendLine(columnDef);
            }
        }

        // Add constraints if any
        if (uniqueConstraints.Any())
        {
            for (int i = 0; i < uniqueConstraints.Count; i++)
            {
                var constraint = uniqueConstraints[i];
                if (i < uniqueConstraints.Count - 1)
                {
                    sb.AppendLine(constraint + ",");
                }
                else
                {
                    sb.AppendLine(constraint);
                }
            }
        }

        sb.AppendLine(")");
        sb.AppendLine("GO");

        return sb.ToString();
    }

    /// <summary>
    /// Create SQL column definition for a field
    /// </summary>
    private string CreateColumnDefinition(MDDField field, string tableName)
    {
        // Get field properties with proper casing
        var fieldName = StringHelper.NormalizeName(field.BaseField.Name);
        var sqlType = SqlHelpers.GetSqlType(field, _document);
        var nullableStr = field.BaseField.IsNullable ? "NULL" : "NOT NULL";

        // Handle computed columns
        if (field.BaseField.IsComputed)
        {
            var computedExpression = field.BaseField.ComputedExpression;
            if (!string.IsNullOrEmpty(computedExpression))
            {
                var persistedStr = field.BaseField.IsPersisted ? " PERSISTED" : "";
                AppLog.Debug("Creating computed column: {FieldName} AS ({Expression}){Persisted}",
                    fieldName, computedExpression, persistedStr);

                var result = $"    [{fieldName}] AS ({computedExpression}){persistedStr}";
                if (!string.IsNullOrEmpty(field.BaseField.InlineComment))
                {
                    result += $" --  {field.BaseField.InlineComment}";
                }
                return result;
            }
            else
            {
                AppLog.Warning("Computed column {FieldName} has no expression defined", fieldName);
                // Fall back to regular column if no expression
            }
        }

        string defaultStr = "";
        if (!string.IsNullOrEmpty(field.BaseField.DefaultValue))
        {
            // Use the StringHelper.TransformDefaultValue method to properly format the default value
            // This handles proper quoting and N prefix for string and enum types

            // If this field type is unknown (gets mapped to NVARCHAR(50)), it's likely an enum
            // so treat it as "enum" for proper default value quoting
            string typeForDefaultValue = field.BaseField.Type;
            if (sqlType == "NVARCHAR(50)" && !IsKnownStringType(field.BaseField.Type))
            {
                typeForDefaultValue = "enum";
            }

            defaultStr = $" DEFAULT {StringHelper.TransformDefaultValue(field.BaseField.DefaultValue, typeForDefaultValue, "sql")}";
        }

        if (field.BaseField.IsPrimaryKey)
        {
            AppLog.Debug("Creating primary key column: {FieldName} ({FieldType})", fieldName, sqlType);

            // Special handling for GUIDs as primary keys
            if (field.BaseField.Type.ToLowerInvariant() == "identifier" ||
                sqlType.Contains("UNIQUEIDENTIFIER"))
            {
                var result = $"    [{fieldName}] {sqlType} NOT NULL PRIMARY KEY DEFAULT NEWSEQUENTIALID()";
                if (!string.IsNullOrEmpty(field.BaseField.InlineComment))
                {
                    result += $" --  {field.BaseField.InlineComment}";
                }
                return result;
            }
            else
            {
                var result = $"    [{fieldName}] {sqlType} NOT NULL PRIMARY KEY{defaultStr}";
                if (!string.IsNullOrEmpty(field.BaseField.InlineComment))
                {
                    result += $" --  {field.BaseField.InlineComment}";
                }
                return result;
            }
        }
        else
        {
            var result = $"    [{fieldName}] {sqlType} {nullableStr}{defaultStr}";
            if (!string.IsNullOrEmpty(field.BaseField.InlineComment))
            {
                result += $" --  {field.BaseField.InlineComment}";
            }
            return result;
        }
    }

    /// <summary>
    /// Check if a field type is a known string type (not an enum)
    /// </summary>
    private static bool IsKnownStringType(string fieldType)
    {
        return fieldType.ToLowerInvariant() switch
        {
            "string" => true,
            "text" => true,
            _ => false
        };
    }
}