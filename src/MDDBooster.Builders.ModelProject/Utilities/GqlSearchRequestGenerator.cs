namespace MDDBooster.Builders.ModelProject.Utilities;

/// <summary>
/// Generates GraphQL search request classes using centralized helpers
/// </summary>
internal class GqlSearchRequestGenerator
{
    private readonly ModelProjectConfig _config;

    internal GqlSearchRequestGenerator(ModelProjectConfig config)
    {
        _config = config;
    }

    /// <summary>
    /// Get the primary key field name for a model
    /// </summary>
    private string GetPrimaryKeyFieldName(MDDDocument document, MDDModel model)
    {
        // Get all fields for the model
        var allFields = ModelUtilities.GetAllFields(document, model);

        // Look for field with Key attribute or Id property
        var keyField = allFields.FirstOrDefault(f =>
            f.BaseField.IsPrimaryKey ||
            string.Equals(f.BaseField.Name, "Id", StringComparison.OrdinalIgnoreCase) ||
            string.Equals(f.BaseField.Name, "_id", StringComparison.OrdinalIgnoreCase));

        if (keyField != null)
        {
            return keyField.BaseField.Name;
        }

        // Fallback: look for any field ending with "Id"
        var idField = allFields.FirstOrDefault(f =>
            f.BaseField.Name.EndsWith("Id", StringComparison.OrdinalIgnoreCase));

        if (idField != null)
        {
            return idField.BaseField.Name;
        }

        // Ultimate fallback
        return "Id";
    }

    /// <summary>
    /// Generate GraphQL search request classes for a model
    /// </summary>
    internal string GenerateSearchRequestClasses(MDDDocument document, MDDModel model)
    {
        var sb = new StringBuilder();

        // File header
        sb.AppendLine("// Code generated by \"MDD Booster\"; DO NOT EDIT.");
        sb.AppendLine("#pragma warning disable CS8618, IDE1006");
        sb.AppendLine($"namespace {GetNamespace()}");
        sb.AppendLine("{");

        // Single item search request
        GenerateSingleSearchRequest(sb, document, model);
        sb.AppendLine();

        // Multiple items search request
        GenerateMultipleSearchRequest(sb, document, model);

        sb.AppendLine("}");
        sb.AppendLine("#pragma warning restore CS8618, IDE1006");

        return sb.ToString();
    }

    private void GenerateSingleSearchRequest(StringBuilder sb, MDDDocument document, MDDModel model)
    {
        string className = $"{model.BaseModel.Name}SearchRequest";
        string interfaceName = $"IGqlSearchRequest<{model.BaseModel.Name}>";

        sb.AppendLine($"    /// <summary>");
        sb.AppendLine($"    /// Single {model.BaseModel.Name} search request");
        sb.AppendLine($"    /// </summary>");
        sb.AppendLine($"    public class {className} : {interfaceName}");
        sb.AppendLine("    {");
        var pkFieldName = GetPrimaryKeyFieldName(document, model);
        sb.AppendLine($"        public Guid {pkFieldName} {{ get; set; }}");
        sb.AppendLine("        public string[] Columns { get; set; }");
        sb.AppendLine("    }");
    }

    private void GenerateMultipleSearchRequest(StringBuilder sb, MDDDocument document, MDDModel model)
    {
        string className = $"{model.BaseModel.Name}sSearchRequest";
        string interfaceName = $"IGqlSearchRequest<{model.BaseModel.Name}>";

        sb.AppendLine($"    /// <summary>");
        sb.AppendLine($"    /// Multiple {model.BaseModel.Name} search request with pagination");
        sb.AppendLine($"    /// </summary>");
        sb.AppendLine($"    public class {className} : PageRequestBase, {interfaceName}");
        sb.AppendLine("    {");

        // Get all fields including inherited ones
        var allFields = ModelUtilities.GetAllFields(document, model);

        // Filter out primary key fields and add search properties for searchable fields
        var searchableFields = allFields.Where(f =>
            !f.BaseField.IsPrimaryKey &&
            IsSearchableField(f) &&
            !ShouldExcludeFromSearch(f)).ToList();

        foreach (var field in searchableFields)
        {
            GenerateSearchProperty(sb, field);
        }

        // Always include IDs array for bulk operations
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Array of specific IDs to search for");
        sb.AppendLine("        /// </summary>");
        var pkFieldName = GetPrimaryKeyFieldName(document, model);
        sb.AppendLine($"        public Guid[]? {pkFieldName}s {{ get; set; }}");

        // Add date range search properties for date fields
        var dateFields = searchableFields.Where(f => IsDateTimeField(f)).ToList();
        if (dateFields.Any())
        {
            sb.AppendLine();
            sb.AppendLine("        // Date range filters");
            foreach (var dateField in dateFields)
            {
                string fieldName = StringHelper.NormalizeName(dateField.BaseField.Name);
                string dateType = _config.UseDateTimeOffset ? "DateTimeOffset" : "DateTime";
                string nullableMarker = "?";

                sb.AppendLine($"        public {dateType}{nullableMarker} {fieldName}From {{ get; set; }}");
                sb.AppendLine($"        public {dateType}{nullableMarker} {fieldName}To {{ get; set; }}");
            }
        }

        sb.AppendLine("    }");
    }

    private void GenerateSearchProperty(StringBuilder sb, MDDField field)
    {
        string propertyName = field.BaseField.Name.ToPlural();
        string propertyType = GetSearchPropertyType(field);
        string nullableMarker = _config.UseNullableReferenceTypes && TypeConversionHelper.IsReferenceType(propertyType) ? "?" : "";

        // Add summary comment
        sb.AppendLine($"        /// <summary>");
        sb.AppendLine($"        /// Search by {field.BaseField.Name} values");
        sb.AppendLine($"        /// </summary>");
        sb.AppendLine($"        public {propertyType}[]{nullableMarker} {propertyName} {{ get; set; }}");
    }

    private string GetSearchPropertyType(MDDField field)
    {
        // For reference fields, use Guid
        if (field.BaseField.IsReference)
        {
            return "Guid";
        }

        return field.BaseField.Type?.ToLowerInvariant() switch
        {
            "identifier" or "guid" => "Guid",
            "integer" => "int",
            "decimal" => "decimal",
            "boolean" => "bool",
            "datetime" or "timestamp" or "date" => _config.UseDateTimeOffset ? "DateTimeOffset" : "DateTime",
            "enum" => GetEnumTypeName(field),
            null => "string", // Handle null Type case
            _ => "string"
        };
    }

    private string GetEnumTypeName(MDDField field)
    {
        // Use the type conversion helper for consistency
        if (!string.IsNullOrEmpty(field.BaseField.ReferenceTarget))
        {
            return field.BaseField.ReferenceTarget;
        }

        // Fallback to string if enum type cannot be determined
        return "string";
    }

    private bool IsSearchableField(MDDField field)
    {
        // Check if field is marked as not searchable
        if (field.ExtendedMetadata.ContainsKey("NotSearchable") &&
            (bool)field.ExtendedMetadata["NotSearchable"])
        {
            return false;
        }

        // Use the base helper for computed field detection
        return !MDDBooster.Helpers.FieldHelper.IsComputedField(field);
    }

    private bool ShouldExcludeFromSearch(MDDField field)
    {
        // Use the base helper for sensitive field detection
        if (MDDBooster.Helpers.FieldHelper.IsSensitiveField(field))
        {
            return true;
        }

        // Exclude very large text fields
        if (!string.IsNullOrEmpty(field.BaseField.Type) &&
            field.BaseField.Type.ToLowerInvariant() == "text" &&
            field.BaseField.Name.Contains("Content", StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }

    private bool IsDateTimeField(MDDField field)
    {
        if (string.IsNullOrEmpty(field.BaseField.Type))
            return false;

        var fieldType = field.BaseField.Type.ToLowerInvariant();
        return fieldType == "datetime" || fieldType == "timestamp" || fieldType == "date";
    }

    private string GetNamespace()
    {
        return MDDBooster.Helpers.NamespaceHelper.GetNamespace(
            _config.Namespace,
            _config.GqlSearchRequestPath,
            null);
    }
}