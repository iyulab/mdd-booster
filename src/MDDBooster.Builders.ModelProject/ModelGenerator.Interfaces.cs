namespace MDDBooster.Builders.ModelProject;

/// <summary>
/// ModelGenerator - Interface generation methods
/// </summary>
public partial class ModelGenerator
{
    /// <summary>
    /// Generate a C# interface
    /// </summary>
    public string GenerateInterface(MDDInterface iface)
    {
        return ErrorHandling.ExecuteSafely(() =>
        {
            var sb = new StringBuilder();

            // File header
            sb.AppendLine("// Code generated by \"MDD Booster\"; DO NOT EDIT.");
            sb.AppendLine($"namespace {GetInterfaceNamespace()};");
            sb.AppendLine();

            // Summary comment
            if (!string.IsNullOrEmpty(iface.BaseInterface.Description))
            {
                sb.AppendLine("/// <summary>");
                sb.AppendLine($"/// {iface.BaseInterface.Description}");
                sb.AppendLine("/// </summary>");
            }

            // Interface declaration
            string inheritance = BuildInterfaceInheritance(iface);
            sb.AppendLine($"public interface {iface.BaseInterface.Name}{inheritance}");
            sb.AppendLine("{");

            // Properties
            var directFields = GetDirectInterfaceFields(iface);
            foreach (var field in directFields)
            {
                AppendInterfaceProperty(sb, field);
            }

            sb.AppendLine("}");
            return sb.ToString();
        },
        string.Empty,
        "Failed to generate interface for {InterfaceName}",
        iface.BaseInterface.Name);
    }

    private string BuildInterfaceInheritance(MDDInterface iface)
    {
        if (!iface.BaseInterface.Inherits.Any())
            return "";

        return " : " + string.Join(", ", iface.BaseInterface.Inherits);
    }

    private void AppendInterfaceProperty(StringBuilder sb, MDDField field)
    {
        string propertyType = TypeConversionHelper.GetCSharpType(field, Document, _config.UseNullableReferenceTypes);
        string propertyName = StringHelper.NormalizeName(field.BaseField.Name);

        // Property summary comment
        if (!string.IsNullOrEmpty(field.BaseField.Description))
        {
            sb.AppendLine("\t/// <summary>");
            sb.AppendLine($"\t/// {field.BaseField.Description}");
            sb.AppendLine("\t/// </summary>");
        }

        // Property declaration
        sb.AppendLine($"\t{propertyType} {propertyName} {{ get; set; }}");
        sb.AppendLine();
    }

    private List<MDDField> GetDirectInterfaceFields(MDDInterface iface)
    {
        // Get fields that are directly declared in this interface (not inherited)
        return iface.Fields.Where(f =>
            iface.BaseInterface.Fields.Any(bf => bf.Name == f.BaseField.Name)).ToList();
    }
}